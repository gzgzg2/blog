<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-03-15T23:50:58+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">나비랑 나리 주인님의 블로그</title><subtitle>Spring back-end 개발자 람람</subtitle><author><name>ramram</name></author><entry><title type="html">[운영체제 스터디] 컴퓨터 구조와 컴퓨터 시스템 동작원리</title><link href="http://localhost:4000/os/os-study-02/" rel="alternate" type="text/html" title="[운영체제 스터디] 컴퓨터 구조와 컴퓨터 시스템 동작원리" /><published>2022-03-15T00:00:00+09:00</published><updated>2022-03-15T00:00:00+09:00</updated><id>http://localhost:4000/os/os-study-02</id><content type="html" xml:base="http://localhost:4000/os/os-study-02/"><![CDATA[<h2 id="1-컴퓨터-구조">1. 컴퓨터 구조</h2>

<p><img src="https://user-images.githubusercontent.com/56028408/157796926-1bb83571-56ea-404a-b551-048cb898fdaf.png" alt="https://user-images.githubusercontent.com/56028408/157796926-1bb83571-56ea-404a-b551-048cb898fdaf.png" /></p>

<p>✔️ 전문가적 입장에서 컴퓨터를 말할 때, 보통 CPU와 Memory를 말한다.</p>

<p>✔️ 컴퓨터는 CPU, Memory, I/O Device, Disk, 네트워크 장비들로 이뤄져있다.</p>

<h2 id="2-컴퓨터-시스템-구조">2. 컴퓨터 시스템 구조</h2>

<p>✔️  CPU</p>

<ul>
  <li>CPU는 매 클럭사이클 마다 메모리에서 instruction을 하나씩 읽어서 실행한다.</li>
  <li>instruction 수행이 종료되면 Interrupt Line을 체크하고 인터럽트 신호가 확인되면 수행한다.</li>
</ul>

<p>✔️  Modebit</p>

<ul>
  <li>사용자가 프로그램의 잘못된 수행으로 다른 프로그램 및 운영체제에 피해가 가지 않도록 하기 위한 보호 장치</li>
  <li>하드웨어적으로 두 가지 모드의 Operation 지원
    <ul>
      <li>1 → 사용자 모드로 사용자 프로그램을 실행한다.</li>
      <li>0 → 커널모드로 OS 코드를 실행한다</li>
    </ul>
  </li>
  <li>보안을 해칠 수 있는 중요한 명령어는 커널 모드에서만 수행 가능한 특권명령으로 규정한다.</li>
  <li>Interrupt나 Exeception이 발생하면 하드웨어가 mode bit를 0으로 변경하여 운영체제에게 CPU를 할당한다.</li>
  <li>커널모드에서 작업이 끝나면 사용자모드로 변경하기 전에 mode bit를 1으로 변경한다.</li>
</ul>

<p>✔️  Timer</p>

<ul>
  <li>특정 프로그램이 CPU를 독점하는 것을 방지하기위한 장치</li>
  <li>운영체제가 사용자 프로그램에게 CPU를 넘겨줄 때 Timer에 값을 지정해서 넘겨준다.</li>
  <li>타이머 값이 0이 되면 타이머가 CPU에게 인터럽트 신호를 발신한다.</li>
  <li>타이머는 time sharing을 구현하기 위해 널리 이용됨</li>
  <li>타이머는 현재 시간을 계산하기 위해서도 사용됨</li>
</ul>

<p>✔️  Memory</p>

<ul>
  <li>메모리는 CPU가 처리할 데이터나 명령어가 임시로 저장되는 곳으로 작업 공간 역할을 한다.</li>
  <li>컴퓨터 작업을 할 때 하드디스크에 있는 데이터는 먼저 메모리로 이동된 다음 CPU로 전송된다.
    <ul>
      <li>프로그램 실행도 이와 마찬가지로 CPU가 메모리에 저장되어 있는 용량만큼 프로그램을 작동시킨다.</li>
    </ul>
  </li>
</ul>

<p>✔️  I/O Device</p>

<ul>
  <li>각각의 I/O Device는 각 디바이스를 전담하는 Controller를 가지고 있다.</li>
  <li>Controller는 각 I/O 디바이스의 내부를 통제하는 작업을 담당한다. CPU에게 인터럽트를 발생시키는 것도 Controller가 담당한다.</li>
  <li>I/O Device는 CPU에 비해 처리속도가 상당히 느리다</li>
  <li>I/O Device는 모두 각각의 Local Buffer를 가지고 있다.</li>
  <li>I/O는 실제 device와 local buffer 사이에서 일어남</li>
</ul>

<p>✔️ I/O Device Controller</p>

<ul>
  <li>I/O 장치유형을 관리하는 일종의 작은 CPU</li>
  <li>제어 정보를 위해 control register, status register를 가짐</li>
  <li>local buffer를 가짐 (일종의 data register)</li>
  <li>Device controller는 I/O가 끝났을 경우 인터럽트로 CPU에 그 사실을 알림</li>
</ul>

<p>✔️ DMA Controller</p>

<ul>
  <li>CPU와 동일하게 직접 메모리에 접근 가능한 컨트롤러</li>
  <li>I/O device의 작업이 종료되어 localBuffer에 데이터가 적재되면 DMA 컨트롤러가 하드웨어 인터럽트를 CPU 대신 수신하여 데이터를 메모리에 복사한 후 합쳐서 CPU에게 인터럽트를 보낸다</li>
</ul>

<p>✔️ 인터럽트 (Interrupt)</p>

<ul>
  <li>인터럽트 당한 시점의 레지스터와 프로그램 카운터를 저장한 후 CPU의 제어를 인터럽트 처리 루틴에 넘긴다.</li>
  <li>넓은 의미의 인터럽트
    <ul>
      <li>interuppt (하드웨어 인터럽트) : 하드웨어가 발생시킨 인터럽트</li>
      <li>trap (소프트웨어 인터럽트)</li>
    </ul>
  </li>
  <li>Exception: 프로그램이 오류를 범한 경우</li>
  <li>System Call: 프로그램이 커널함수를 호출하는 경우</li>
  <li>인터럽트 관련 용어
    <ul>
      <li>인터럽트 백터
        <ul>
          <li>해당 인터럽트의 처리 루틴 주소를 가지고 있다.</li>
        </ul>
      </li>
      <li>인터럽트 처리 루틴
        <ul>
          <li>해당 인터럽트를 처리하는 커널 함수</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="3-입출력-io의-수행">3. 입출력 (I/O)의 수행</h2>

<ul>
  <li>모든 입출력 명령은 특권 명령이다.</li>
  <li>사용자 프로그램이 I/O를 하는 방식
    <ul>
      <li>시스템콜(system call)</li>
      <li>사용자 프로그램이 운영체제의 서비스를 받기위해 호출하는 것</li>
    </ul>
  </li>
  <li>trap을 사용하여 인터럽트 벡터의 특정 위치로 이동</li>
  <li>제어권이 인터럽트 벡터가 가리키는 인터럽트 서비스 루틴으로 이동</li>
  <li>올바른 I/O 요청인지 확인 후 I/O 수행</li>
  <li>I/O 완료 시 제어권을 시스템콜 다음 명령으로 옮김</li>
</ul>

<h2 id="3-동기식-입출력">3. 동기식 입출력</h2>

<p>✔️ 동기식 입출력은 어떤 프로그램이 입출력 요청을 했을 때</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>입출력 작업이 완료된 후에야 그 프로그램이 후속 작업을 수행할 수 있는 방식을 말한다.
</code></pre></div></div>

<p>🌟  <strong>동기식 입출력의 실행 방식</strong> 🌟</p>

<blockquote>
  <p>동기식 입출력은 프로그램이 디스크에서 어떤 정보를 읽어오라는 요청을 했을 때 디스크 입출력이 진행되는 동안 그 프로그램의 다음 명령을 수행하지 않고 기다린다.
그러다가 입출력이 완료되어 인터럽트를 통해 완료 사실이 전달된 후에야 CPU의 제어권이 해당 프로그램에게 넘어간다.</p>
</blockquote>

<p>따라서 동기식 입출력에서 CPU는 입출력 연산이 끝날 때까지 인터럽트를 기다리며 자원을 낭비하게 된다.
한편 CPU의 명령 수행 속도는 빠르지만 입출력 장치에서 데이터를 읽어오는 등의 입출력 연산은 상대적으로 느리다.</p>

<p>그럼에도 불구하고 입출력이 완료될 때까지 대기했다가 사용자 프로그램에게 CPU의 제어권을 넘기는 방식은 자원 낭비를 초래한다.</p>

<p>따라서 일반적으로 프로그램이 입출력을 수행 중인 경우 CPU를 입출력을 실행한 프로그램에게서 빼앗아 다른 프로그램에게 할당하고 입출력을 수행중인 프로그램은 봉쇄상태로 변경한다.</p>
<blockquote>

</blockquote>

<h2 id="4-비동기식-입출력">4. 비동기식 입출력</h2>

<p>비동기식 입출력은 프로그램이 디스크 정보를 요청하더라도 프로그램을 봉쇄상태로 이동하지 않고 다음 작업을 수행한다.</p>

<p>🌟  비<strong>동기식 입출력의 실행 방식</strong> 🌟</p>

<blockquote>
  <p>비동기식 입출력은 입출력 연산을 요청한 후에 연산이 끝나기를 기다리는 것이 아니라</p>

  <p>CPU의 제어권을 입출력 연산을 호출한 그 프로그램에게 곧바로 다시 부여하는 것을 말한다.</p>

  <p>어떤 프로그램이 데이터를 디스크에서 읽어오라는 요청을 했을 때 보통은 읽어온 결과를 이용해서 다음 연산을 수행하지만 경우에 따라서는 그 데이터와 관련없이 수행할 수 있는 일이 있을 것이다.</p>

  <p>비동기식 입출력에서는 그러한 작업을 먼저 수행하고, 읽어오는 데이터가 반드시 이어야 수행할 수 있는 일들은 입출력이 완료된 후에 수행하게 된다.</p>

  <p>또한 디스크에서 읽어오는 요청이 아니라 디스크에 쓰는 요청이라면 쓰기 작업이 완료되기 전에도 다음 명령을 수행할 수 있으므로 비동기식 입출력이 사용될 수 있다.</p>

</blockquote>

<h2 id="5-프로그램의-구조와-실행">5. 프로그램의 구조와 실행</h2>

<p>✔️ 프로그램의 구조와 인터럽트</p>

<ul>
  <li>프로그램이 CPU에서 명령을 수행하려면 해당 명령을 담은 프로그램의 주소 영역이 메모리에 올라가 있어야 한다. 이때 프로그램의 주소 영역은 크게 코드, 데이터, 스택 영역으로 구분된다.</li>
</ul>

<p>✔️ 코드영역</p>

<ul>
  <li>코드영역은 작성한 프로그램의 함수들의 코드가 CPU에서 수행할 수 있는 기계어 명령 형태로 변환되어 저장되는 부분</li>
</ul>

<p>✔️ 데이터 영역</p>

<ul>
  <li>전역 변수 등 프로그램이 사용하는 데이터를 저장하는 부분</li>
</ul>

<p>✔️ 스택 영역</p>

<ul>
  <li>함수가 호출될 때 호출된 함수의 수행을 마치고 복귀할 주소 및 데이터를 임시로 저장하는 데에 사용되는 공간</li>
</ul>

<p>✔️ 컴퓨터 시스템의 작동 개요</p>

<ul>
  <li>CPU는 빠른 속도로 처리하는 계산 능력은 가지고 있지만, 수행해야하는 작업을 스스로 결정하는 능력은 갖추고 있지 않다.</li>
  <li>
    <p>CPU는 매 시점 메모리의 특정 주소에 존재하는 명령어를 하나씩 읽어와서 그대로 실행한다.</p>

    <p>이때 CPU가 수행해야 할 메모리 주소를 담고 있는 레지스터를 프로그램 카운터라고 부른다.</p>
  </li>
  <li>CPU는 매번 프로그램 카운터가 가리키는 메모리 위치의 명령을 처리하게 된다.</li>
</ul>

<p>✔️ 프로그램의 실행</p>

<ul>
  <li>프로그램이 실행되고 있다는 것은 디스크에 존재하면 실행파일이 메모리에 적재된다는 의미와</li>
  <li>프로그램이 CPU를 할당받고 명령을 수행하고 있는 상태라는 의미이다.</li>
  <li>현재 수행 중인 프로그램을 프로세서(process)라고 부른다.</li>
  <li>각 프로그램은 코드, 데이터, 스택영역과 같은 주소 공간을 별도로 가진다</li>
  <li>프로그램마다 독자적으로 존재하는 주소공간을 가상메모리 또는 논리적 메모리라고 부른다.</li>
</ul>

<hr />

<p><strong>[질문 리스트]</strong></p>

<ol>
  <li>사용자 프로그램이 I/O를 요청했을 때 일어나는 일을 설명해보시오
    <ul>
      <li>사용자는 직접 입출력 장치에 접근할 수 없기 때문에 시스템 콜을 하여 운영체제에게 I/O 작업을 요청한다.
 운영체제는 요청받은 I/O 명령을 사용자 프로그램 모드가 아닌 커널 모드에서 해당 요청에 맞는 처리코드를 수행하게 된다.
 예를 들어 디스크에서 자료를 읽어오는 시스템 콜이라면, CPU가 디스크 컨트롤러에게 데이터를 읽어오라는 명령을 내린다.</li>
    </ul>
  </li>
  <li>DMA 컨트롤러의 기능을 설명해주세요.
    <ul>
      <li>CPU가 입출력 장치들의 메모리 접근 요청에 의해 자주 인터럽트 당하는 것을 막아주어서
 CPU에 발생하는 인터럽트의 빈도를 줄여 CPU를 효율적으로 관리할 수 있게 도와주는 역할을 한다.</li>
      <li>DMA를 사용하면 CPU가 로컬버퍼에서 메모리로 읽어오는 작업을 DMA가 대행한다.</li>
      <li>DMA는 바이트 단위가 아니라 블록이라는 큰 단위로 정보를 메모리로 읽어온 후에 CPU에게 인터럽트를 발생시켜 작업이 끝난 것을 알린다.</li>
    </ul>
  </li>
  <li>시스템콜에 대해 설명해보세요
    <ul>
      <li>시스템 콜이란 사용자 프로그램이 특권명령을 수행하기 위해 운영체제에게 해당 작업을 요청하는 행위이다.
 시스템 콜은 일종의 소프트웨어적인 인터럽스로서 사용자 프로그램이 시스템 콜을 할 경우 트랩이 발생해 CPU의 제어권이 운영체제로 넘어가게 된다.
 그러면 운영체제는 해당 시스템 콜을 처리하기 위한 루틴으로 가서 정의된 명령을 수행한다.</li>
    </ul>
  </li>
</ol>]]></content><author><name>ramram</name></author><category term="OS" /><category term="운영체제" /><category term="컴퓨터 구조" /><category term="OS" /><category term="Operating System" /><summary type="html"><![CDATA[1. 컴퓨터 구조]]></summary></entry><entry><title type="html">SpringFramework - Web ApplicationContext</title><link href="http://localhost:4000/tobi/spring-applicationcontext/" rel="alternate" type="text/html" title="SpringFramework - Web ApplicationContext" /><published>2022-02-21T00:00:00+09:00</published><updated>2022-02-21T00:00:00+09:00</updated><id>http://localhost:4000/tobi/spring-applicationcontext</id><content type="html" xml:base="http://localhost:4000/tobi/spring-applicationcontext/"><![CDATA[<h2 id="1--ioc-컨테이너--빈-팩토리와-애플리케이션-컨텍스트">1.  IoC 컨테이너 : 빈 팩토리와 애플리케이션 컨텍스트</h2>

<ul>
  <li>스프링 애플리케이션에서는 오브젝트의 생성과 관계설정, 사용, 제거 등의 작업을 애플리케이션 코드 대신 독립적인 컨테이너가 담당한다.</li>
  <li>이를 컨테이너가 코드 대신 오브젝트 제어권을 갖고있다고 해서 IoC 라고 부른다. 그래서 스프링 컨테이너를 IoC 컨테이너 라고도 한다.</li>
  <li>스프링에선 IoC를 담당하는 컨테이너를 빈 팩토리 또는 애플리케이션 컨텍스트라고 부르기도 한다.</li>
  <li>오브젝트의 생성과 오브젝트 사이의 런타임 관계를 설정하는 DI 관점으로 볼 때는 컨테이너를 빈 팩토리라고 한다.</li>
  <li>그런데 스프링 컨테이너는 단순한 DI 작업보다 더 많은 일을 한다. DI를 위한 빈 팩토리에 엔터프라이즈 애플리케이션을 개발하는 데 필요한 여러 가지 컨테이너 기능을 추가한 것을 애플리케이션 컨텍스트라고 부른다.</li>
</ul>

<p>❗ApplicationContext는 beacFactory interface를 상속받고 있지만, 위임하는 것 외에 다른 로직은 구현하지 않는다.</p>

<h2 id="2-web-applicationcontext">2. Web ApplicationContext</h2>

<ul>
  <li>스프링 애플리케이션에서 가장 많이 사용되는 ApplicationContext는 바로 WebApplicationContext 이다. WebApplicationContext는 ApplicationContext를 확장한 인터페이스이므로 정확히는 WebApplicationContext를 구현한 클래스를 사용하는 셈이다.</li>
  <li>웹 애플리케이션에서 만들어지는  IoC 컨테이너는 WebApplicationContext 인터페이스를 구현한 것임을 기억해두자.</li>
  <li>WebApplicationContext의 특징은 자신이 만들어지고 동작하는 환경인 웹 모듈에 대한 정보에 접근할 수 있다는 점이다. 이를 이용해 웹 환경으로부터 필요한 정보를 가져오거나, 웹 환경에 스프링 컨테이너 자신을 노출할 수 있다. 컨테이너가 웹 환경에 노출되면 같은 웹 모듈이 들어 있는 스프링 빈이 아닌 일반 오브젝트와 연동될 수 있다.</li>
</ul>

<h2 id="3-web-applicationcontext--계층구조">3. Web ApplicationContext  계층구조</h2>

<ul>
  <li>웹 애플리케이션 레벨에 등록되는 컨테이너는 보통 루트 웹 애플리케이션 컨텍스트라고 불린다.</li>
  <li>루트 웹 애플리케이션 컨텍스트는 서블릿 레벨에 등록되는 컨테이너들의 부모 컨테이너가 되고, 일반적으로 전체 계층구조 내에서 가장 최상단에 위치한 루트 컨텍스트가 되기 때문이다.</li>
  <li>웹 애플리케이션에는 하나 이상의 스프링 애플리케이션의 프론트 컨트롤러 역할을 하는 서블릿이 등록될 수 있다(디스패쳐 서블릿은 프론트 컨트롤러 패턴으로 구현되었음)</li>
  <li>등록된 서블릿에는 각각 독립적으로 애플리케이션 컨텍스트가 만들어진다. 이런 경우 각 서블릿이 공유하게 되는 공통적인 빈들이 생길 수 있다.</li>
  <li>공통적으로 사용하는 빈을 루트 웹 애플리케이션 레벨의 컨텍스트에 등록하면 공통되는 빈들이 서블릿별로 중복돼서 생성되는 것을 방지할 수 있다.</li>
  <li>하지만 하나의 서블릿이 모든 애플리케이션 요청을 처리하는 프론트 컨트롤러 패턴으로 구현되었기 때문에 여러개의 서블릿 컨테이너를 생성하는 것은 드물다</li>
</ul>

<details>
  <summary>❗여러개의 자식 컨테이너를 생성하는 것이 아닌데 계층 구조를 사용하는 이유는?
</summary>
  <div>
    <p>그 이유는 전체 애플리케이션에서 웹 기술에 의존적인 부분과 그렇지 않은 부분을 구분하기 위해서이다. 스프링을 이용하는 웹 애플리케이션이라고 해서</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>반드시 스프링 웹 서블릿 만들 필요는 없다. 스프링 기술을 사용하고 스프링 빈으로 만들지만 웹을 담당하는 프레젠테이션 계층은 스프링 외의 기술을 사용하는 경우도 종종 있기 때문이다.
</code></pre></div>    </div>
  </div>
</details>

<h2 id="4-부모-컨텍스트를-이용한-계층구조-효과">4. 부모 컨텍스트를 이용한 계층구조 효과</h2>

<ul>
  <li>모든 애플리케이션 컨텍스트는 부모 애플리케이션 컨텍스트를 가질 수 있다.</li>
  <li>계층구조 안의 모든 컨텍스트는 각자 독립적인 설정정보를 이용해 빈 오젝트를 만들고 관리한다.</li>
  <li>각자 독립적으로 자신이 관리하는 빈을 갖고 있긴 하지만 DI를 위해 빈을 찾을 떄는 부모 애플리케이션의 빈까지 모두 검색한다.</li>
  <li>먼저 자신이 관리하는 빈 중에서 필요한 빈을 찾아보고, 없으면 부모 컨텍스트에게 빈을 찾아달라고 요청한다. (빈을 찾지 못할 경우 계층구조를 따라서 가장위에 존재하는 루트 컽넥스트까지 요청이 전달 됨)</li>
  <li>자신과 부모 컨텍스트에 동일한 빈이 존재한다면, 자신이 갖고있는 빈이 우선시 된다.  (빈 검색 순서는 자신이 먼저이고, 그 다음 직계 부모의 순서이다.)</li>
</ul>

<p>❗중요한 건 자신의 부모 컨텍스트에게만 빈을 요청하고, 자식 컨텍스트에게는 요청하지 않는 점이다. 그런 이유로 같은 레벨에 있는 형제 컨텍스트의 빈도 찾을 수 없다.</p>

<h2 id="5-web-applicationcontext-의-root-context-가-어떻게-결정되나">5. Web ApplicationContext 의 Root Context 가 어떻게 결정되나?</h2>

<ul>
  <li>WAS 가 구동될 때  Web.xml 의 설정 정보를 리딩한다.</li>
  <li>리딩되면서 SpringContextLoader가 Web.Xml의 contextConfigLocation 의 파일경로를 스캔하고  root-context로 생성한다.</li>
</ul>

<details>
  <summary>❗dispatcher-servlet context 안에서도 contextConfigLocation 을 생성하고 있는데 context-param 안의 contextConfigLocation가 root-context 인 이유는?
</summary>
  <div>
    <p>자세하진  않지만 .. context-param 과 init-param 의 차이는 전역변수, 지역변수의 개념과 비슷하다. context-param 안에서 생성된 빈은 모든 서블릿에서 사용할 수 있다.</p>

    <p>init-param으로 생성된 빈들은 해당 서블릿 안에서만 참조가 가능하다. 이런 이유 때문에 context-param 안에 생성된 contextConfigLocation를 root-context 로 인식하는게 아닐까 싶다.</p>
  </div>
</details>

<p><br />
<br />
<br /></p>

<h1 id="아직-작성-중-">아직 작성 중 …</h1>]]></content><author><name>ramram</name></author><category term="Tobi" /><category term="springframework" /><category term="applicationContext" /><category term="dispatcherServlet" /><category term="토비의 스프링 3.1" /><summary type="html"><![CDATA[1. IoC 컨테이너 : 빈 팩토리와 애플리케이션 컨텍스트]]></summary></entry><entry><title type="html">SpringBoot - Redis Client 적용기</title><link href="http://localhost:4000/springboot/spring-boot-redis/" rel="alternate" type="text/html" title="SpringBoot - Redis Client 적용기" /><published>2022-02-16T00:00:00+09:00</published><updated>2022-02-21T00:00:00+09:00</updated><id>http://localhost:4000/springboot/spring-boot-redis</id><content type="html" xml:base="http://localhost:4000/springboot/spring-boot-redis/"><![CDATA[<h2 id="들어가며">들어가며</h2>

<p>스프링부트 Redis 적용 방법을 공유하고자 게시물을 작성하였다.
예제코드로 적용 방법을 알아보자</p>

<h2 id="redis-의존-설정">🌟 Redis 의존 설정</h2>

<p>Spring은 다양한 Redis 의존설정 방법을 제공한다.</p>

<p>1 - Gradle이나 Maven 설정 파일에 의존 추가하기</p>

<div class="language-scheme highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">dependencies</span> <span class="err">{</span>
	<span class="nv">implementation</span> <span class="ss">'org</span><span class="o">.</span><span class="nv">springframework</span><span class="o">.</span><span class="nv">boot:spring-boot-starter-data-redis</span><span class="o">'</span>
<span class="err">}</span>
</code></pre></div></div>
<p><br />
2 - Intellij tool 을 사용하여 SpringBoot 프로젝트 생성시점에 Spring Data Redis 를 추가하는 방법이다.</p>

<p><img src="https://user-images.githubusercontent.com/56028408/154784437-6aff0467-1b9e-401d-a3da-928f16524194.png" alt="redis-intellij" width="550" height="500" /></p>

<p>3 - Spring initializr 로 프로젝트 생성 시점에 Spring Data Redis 추가하기</p>

<p><img src="https://user-images.githubusercontent.com/56028408/154784439-d6dafd63-1c91-47b5-b38f-4533574a972b.png" alt="initalizr-redis" width="700" height="500" /></p>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">💡 참고로 Springboot 2 부터는 Lettuce가 기본 Redis Client로 사용된다. 본 프로젝트도 Lettuce를 사용하였다</code></p>

<h2 id="applicationyml-설정">🌟 A<strong>pplication.yml</strong> 설정</h2>

<p>정말 간단하게 Redis 의존을 추가했다. 이제 남은 건 A<strong>pplication.yml</strong> 작성과 Redis Configuration Bean 만 등록하면 된다. 아마도</p>

<p>ymal 작성은 매우 간단하다.</p>

<div class="language-scheme highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">spring:</span>
	<span class="nv">redis:</span>
		<span class="nv">lettuce:</span>
			<span class="nv">pool:</span>
				<span class="nv">max-active:</span> <span class="mi">1000</span>
				<span class="nv">max-idle:</span> <span class="mi">500</span>
				<span class="nv">min-idle:</span> <span class="mi">2</span>
				<span class="nv">max-wait:</span> <span class="mi">1000</span>
	<span class="nv">port:</span> <span class="mi">6379</span>
	<span class="nv">host:</span> <span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span>
	<span class="nv">password:</span> <span class="ss">'vldpsxl1q2w3e</span><span class="o">'</span>
</code></pre></div></div>

<p>Redis 에 관한 정보만 입력한다고 가정하면 이게 끝이다.  설정 정보는 아래 표 참조 바람<br />
<br /></p>

<p><strong>Redis Option</strong></p>

<table>
  <thead>
    <tr>
      <th>파라미터</th>
      <th>파라미터 설명</th>
      <th>기본값</th>
      <th>기타</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>spring.redis.pool.max-active</td>
      <td>pool에 할당할 수 있는 최대 커넥션 수 (음수는 무제한)</td>
      <td>8</td>
      <td> </td>
    </tr>
    <tr>
      <td>spring.redis.pool.max-idle</td>
      <td>pool의 “idle” 커넥션 최대수 (음수는 무제한)</td>
      <td>8</td>
      <td> </td>
    </tr>
    <tr>
      <td>spring.redis.pool.max-wait</td>
      <td>사용 가능한 커넥션이 없을 때 호출자가 대기해야하는 최대 시간 (단위 : 밀리초, 음수는 무제한 차단)</td>
      <td>-1</td>
      <td> </td>
    </tr>
    <tr>
      <td>spring.redis.pool.min-idle</td>
      <td>pool에서 관리하는 “idle” 커넥션 최소수 (양수일 떄만 유효)</td>
      <td>0</td>
      <td> </td>
    </tr>
    <tr>
      <td>spring.redis.port</td>
      <td>redis server port</td>
      <td>6379</td>
      <td> </td>
    </tr>
    <tr>
      <td>spring.redis.host</td>
      <td>redis server host</td>
      <td>127.0.0.1</td>
      <td> </td>
    </tr>
    <tr>
      <td>spring.redis.password</td>
      <td>redis server login password</td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>spring.redis.timeout</td>
      <td>커넥션 타임아웃 (단위: 밀리세컨드)</td>
      <td>0</td>
      <td> </td>
    </tr>
    <tr>
      <td>spring.redis.database</td>
      <td>커넥션 팩토리에 사용되는 데이터베이스 인덱스</td>
      <td>0</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h2 id="redisconnectionfactory-redistemplate-설정하기">🌟 RedisConnectionFactory, RedisTemplate 설정하기</h2>

<p>순조롭게 Yaml 파일 설정도 끝이났다.  이제는 Java를 사용해서 기존에 xml 파일로 설정했던 RedisFactory, RedisTemplate를 변경해보자.</p>

<h3 id="xml">XML</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- Redis 설정 고통 부분--&gt;</span>
<span class="c">&lt;!-- Redis Serializer --&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"stringRedisSerializer"</span> <span class="na">class=</span><span class="s">"org.springframework.data.redis.serializer.StringRedisSerializer"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"jsonRedisSerializer"</span> <span class="na">class=</span><span class="s">"org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"jackson2JsonRedisSerializer"</span> <span class="na">class=</span><span class="s">"org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;constructor-arg&gt;</span>
        <span class="nt">&lt;value&gt;</span>java.util.Map<span class="nt">&lt;/value&gt;</span>
    <span class="nt">&lt;/constructor-arg&gt;</span>
<span class="nt">&lt;/bean&gt;</span>

<span class="c">&lt;!-- Redis Template --&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"redisTemplate"</span> <span class="na">class=</span><span class="s">"org.springframework.data.redis.core.RedisTemplate"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"connectionFactory"</span> <span class="na">ref=</span><span class="s">"jedisConnFactory"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"keySerializer"</span> <span class="na">ref=</span><span class="s">"stringRedisSerializer"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"valueSerializer"</span> <span class="na">ref=</span><span class="s">"jsonRedisSerializer"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"hashKeySerializer"</span> <span class="na">ref=</span><span class="s">"stringRedisSerializer"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"hashValueSerializer"</span> <span class="na">ref=</span><span class="s">"jsonRedisSerializer"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="java">JAVA</h3>

<p><strong>RedisTemplate 설정</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@EnableRedisRepositories</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisTemplateConfig</span> <span class="o">{</span>

		<span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.redis.host}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">redisHost</span><span class="o">;</span>
		<span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.redis.port}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">redisPort</span><span class="o">;</span>

		<span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">RedisConnectionFactory</span> <span class="nf">redisConnectionFactory</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">LettuceConnectionFactory</span><span class="o">(</span><span class="n">redisHost</span><span class="o">,</span><span class="n">redisPort</span><span class="o">);</span>
		<span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">redisTemplate</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">redisTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedisTemplate</span><span class="o">&lt;&gt;();</span>
				<span class="n">redisTemplate</span><span class="o">.</span><span class="na">setKeySerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringRedisSerializer</span><span class="o">());</span>
				<span class="n">redisTemplate</span><span class="o">.</span><span class="na">setValueSerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">GenericJackson2JsonRedisSerializer</span><span class="o">());</span>
				<span class="n">redisTemplate</span><span class="o">.</span><span class="na">setHashKeySerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringRedisSerializer</span><span class="o">());</span>
				<span class="n">redisTemplate</span><span class="o">.</span><span class="na">setHashValueSerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">GenericJackson2JsonRedisSerializer</span><span class="o">());</span>
				<span class="k">return</span> <span class="n">redisTemplate</span><span class="o">;</span>
		<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>기존 xml 파일은 번거롭게 Serializer 클래스를 매번 bean으로 등록해서 redisTemplate에 주입했다.
그런데 자바코드는 간단하게 인스턴스만 생성해서 주입하고 있는 것을 확인할 수 있다.</p>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">💡 참고로 RedisTemplate는 RedisTemplate뿐만 아니라 StringRedisTemplate 도 존재한다.  게시물 주제와 연관이 없으므로 자세한 내용은 생략한다.</code></p>

<p><br /></p>

<h2 id="redis-message-listener">🌟 Redis Message Listener</h2>

<p>이제 Redis Message Listener를 등록해보자.</p>

<h3 id="xml-1">XML</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!--첫번째--&gt;</span>
 <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"redisKeyExpireMessageListener"</span> <span class="na">class=</span><span class="s">"org.springframework.data.redis.listener.adapter.MessageListenerAdapter"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;constructor-arg&gt;</span>
            <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"framework.redis.RedisKeyExpireMessageListener"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/constructor-arg&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>

<span class="c">&lt;!--두번째--&gt;</span>
  <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"redisContainer1"</span> <span class="na">class=</span><span class="s">"org.springframework.data.redis.listener.RedisMessageListenerContainer"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"connectionFactory"</span> <span class="na">ref=</span><span class="s">"jedisConnFactory"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"messageListeners"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;map&gt;</span>
              <span class="nt">&lt;entry</span> <span class="na">key-ref=</span><span class="s">"redisKeyExpireMessageListener"</span><span class="nt">&gt;</span>
<span class="c">&lt;!--세번째--&gt;</span>
                  <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"org.springframework.data.redis.listener.PatternTopic"</span><span class="nt">&gt;</span>
                      <span class="nt">&lt;constructor-arg</span> <span class="na">value=</span><span class="s">"__keyevent@*:expired"</span><span class="nt">/&gt;</span>
                  <span class="nt">&lt;/bean&gt;</span>
              <span class="nt">&lt;/entry&gt;</span>
          <span class="nt">&lt;/map&gt;</span>
      <span class="nt">&lt;/property&gt;</span>
  <span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<ol>
  <li><code class="language-plaintext highlighter-rouge">MessageListenerAdapter</code> 빈에  <code class="language-plaintext highlighter-rouge">MessageListener</code> 를 주입한다.</li>
  <li><code class="language-plaintext highlighter-rouge">RedisMessageListenerContainer</code> 빈 등록 <code class="language-plaintext highlighter-rouge">connectionFactory</code>, <code class="language-plaintext highlighter-rouge">messageListeners</code> 주입</li>
  <li><code class="language-plaintext highlighter-rouge">redisKeyExpireMessageListener</code> 가 수신할 채널 혹은 패턴을 등록한다. 패턴은 이벤트 또는 채널명이 될 수 있다.</li>
</ol>

<h3 id="java-1">JAVA</h3>

<p><strong>MessageListenerAdapter 추가</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="nd">@Bean</span>
  <span class="kd">public</span> <span class="nc">MessageListenerAdapter</span> <span class="nf">messageListenerAdapter</span><span class="o">(</span><span class="nc">RedisKeyExpireMessageListener</span> <span class="n">redisKeyExpireMessageListener</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nf">MessageListenerAdapter</span><span class="o">(</span><span class="n">redisKeyExpireMessageListener</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="nd">@Bean</span>
  <span class="kd">public</span> <span class="nc">RedisMessageListenerContainer</span> <span class="nf">redisMessageListenerContainer</span><span class="o">(</span>
          <span class="nc">RedisConnectionFactory</span> <span class="n">redisConnectionFactory</span>
          <span class="o">,</span> <span class="nc">MessageListenerAdapter</span> <span class="n">messageListenerAdapter</span><span class="o">,</span> <span class="nc">PatternTopic</span> <span class="n">patternTopic</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">RedisMessageListenerContainer</span> <span class="n">container</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedisMessageListenerContainer</span><span class="o">();</span>
      <span class="n">container</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">redisConnectionFactory</span><span class="o">);</span>
      <span class="n">container</span><span class="o">.</span><span class="na">addMessageListener</span><span class="o">(</span><span class="n">messageListenerAdapter</span><span class="o">,</span> <span class="n">patternTopic</span><span class="o">);</span>
      <span class="k">return</span> <span class="n">container</span><span class="o">;</span>
  <span class="o">}</span>

	<span class="nd">@Bean</span>
  <span class="kd">public</span> <span class="nc">PatternTopic</span> <span class="nf">patternTopic</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nf">PatternTopic</span><span class="o">(</span><span class="s">"__keyevent@*:expired"</span><span class="o">);</span>
  <span class="o">}</span>
</code></pre></div></div>

<p><strong>MessageListenerAdapter 에 주입할 MessageListener 구현</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisKeyExpireMessageListener</span> <span class="kd">implements</span> <span class="nc">MessageListener</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onMessage</span><span class="o">(</span><span class="nc">Message</span> <span class="n">message</span><span class="o">,</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span>
				
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br />
❗ spring boot 의 <code class="language-plaintext highlighter-rouge">@EnableAutoConfiguration</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring boot 는  프로젝트에 추가된 라이브러리를 기반으로 실행에 필요한 환경을 자동으로 설정해준다.
어떻게 보면 정말 편리한 기능이지만, 섬세한 설정이 필요한 경우엔 직접 설정하는 것이 안전하다.
</code></pre></div></div>

<h2 id="redis-cache-management">🌟 Redis Cache Management</h2>

<h3 id="xml-2">XML</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- redis Cache 설정 --&gt;</span>
  <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"redisCachePrefix"</span> <span class="na">class=</span><span class="s">"org.springframework.data.redis.cache.DefaultRedisCachePrefix"</span> <span class="nt">&gt;</span>
      <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">"delimiter"</span> <span class="na">value=</span><span class="s">"_"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/bean&gt;</span>

  <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"cacheManager"</span> <span class="na">class=</span><span class="s">"org.springframework.data.redis.cache.RedisCacheManager"</span> <span class="na">primary=</span><span class="s">"true"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;constructor-arg</span> <span class="na">ref=</span><span class="s">"redisTemplate"</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"defaultExpiration"</span> <span class="na">value=</span><span class="s">"1000"</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"usePrefix"</span> <span class="na">value=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"cachePrefix"</span> <span class="na">ref=</span><span class="s">"redisCachePrefix"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="java-2">JAVA</h3>
<p><strong>@EnableCaching 어노테이션 추가</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="nd">@EnableCaching</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringBootStudyApplication</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">SpringBootStudyApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>@EnableCaching 어노테이션은 @Cacheable 메소드가 호출될 때 사용되는 CacheInterceptor 및 Proxy 또는 AspectJ 같은 캐시 관리에 필요한 스프링 구성요소를 등록하는 역할을 한다.</p>

<p>@EnableCaching 어노테이션 뿐만 아니라 xml 파일에서 cacheManger 를 선언해서 사용할 때도 동일하게 동작한다.</p>

<p><br /></p>

<p><strong>CacheManagerConfig.class</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CacheManagerConfig</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">RedisCacheConfig</span> <span class="n">redisCacheConfig</span><span class="o">;</span>

	<span class="nd">@Bean</span>
  <span class="kd">public</span> <span class="nc">CacheManager</span> <span class="nf">cacheManager</span><span class="o">(</span><span class="nc">RedisConnectionFactory</span> <span class="n">redisConnectionFactory</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="nc">RedisCacheManager</span><span class="o">.</span><span class="na">RedisCacheManagerBuilder</span>
              <span class="o">.</span><span class="na">fromConnectionFactory</span><span class="o">(</span><span class="n">redisConnectionFactory</span><span class="o">)</span>
              <span class="o">.</span><span class="na">cacheDefaults</span><span class="o">(</span><span class="n">getDefaultRedisCacheConfiguration</span><span class="o">())</span>
              <span class="o">.</span><span class="na">build</span><span class="o">();</span>
	<span class="o">}</span>

  <span class="kd">private</span> <span class="nc">RedisCacheConfiguration</span> <span class="nf">getDefaultRedisCacheConfiguration</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="nc">RedisCacheConfiguration</span><span class="o">.</span><span class="na">defaultCacheConfig</span><span class="o">()</span>
              <span class="o">.</span><span class="na">entryTtl</span><span class="o">(</span><span class="nc">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="n">redisCacheConfig</span><span class="o">.</span><span class="na">getTtl</span><span class="o">()))</span>
              <span class="o">.</span><span class="na">prefixCacheNameWith</span><span class="o">(</span><span class="n">redisCacheConfig</span><span class="o">.</span><span class="na">getCachePrefix</span><span class="o">());</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p><strong>RedisCacheConfig.class</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="n">prefix</span><span class="o">=</span><span class="s">"config.redis.cache"</span><span class="o">)</span>
<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisCacheConfig</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">cachePrefix</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">ttl</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">application.yml</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">config:</span>
  <span class="nl">redis:</span>
      <span class="nl">cache:</span>
        <span class="n">cache</span><span class="o">-</span><span class="nl">ttl:</span> <span class="mi">1000</span>
        <span class="n">cache</span><span class="o">-</span><span class="nl">prefix:</span> <span class="s">"_"</span>
</code></pre></div></div>

<h2 id="lettuce를-선택한-이유">🌟 Lettuce를 선택한 이유</h2>

<p>마지막으로 Redis Client로 Lettuce를 선택한 이유를 설명하고자 한다.</p>

<h3 id="lettuce란">Lettuce란?</h3>

<p>lettuce는 Netty 기반의 Redis Client로 동기, 비동기 및 대응적 사용을 위해 확장 가능한 Thread-Safe Redis Client이다.</p>

<p>트랜잭션을 사용하지 않는 경우 하나의 연결을 공유할 수 있다. 추가로 Sentinel, Cluster, Pipelining, Auto-Reconnect 및 Redis 데이터 모델과 같은 고급 Redis 기능을 지원한다.</p>

<h3 id="lettuce-장점">Lettuce 장점</h3>

<ul>
  <li>connection 인스턴스를 여러 쓰레드에서 공유할 수 있기 때문에 Thread-safe하다.</li>
  <li>Lettuce는 비동기로 요청을 처리하기 때문에 성능적인 이점이 있다. (비동기, 동기 둘 다 지원하기 때문에 유연하게 사용가능)</li>
  <li>Jedis보다 다양한 DataType지원</li>
</ul>

<p><br /></p>
<details>
  <summary>❗connection 인스턴스를 여러 쓰레드에서 공유할 수 있는 것이 장점인 이유는?</summary>
  <div>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Redis 서버 인스턴스는 여러 클라이언트에 연결하여 명령을 동시에 보내고 받을 수 있지만, 명령을 실행할 때 각 인스턴스는 단일 스레드이다.
    
이는 애플리케이션이 멀티스레딩+단일 연결을 통해 Redis를 운영할 수 있다면 Redis 서버의 전체 연결 수를 효율화 할 수 있고,
    
여러 애플리케이션이 동일한 Redis 서버를 공유할 때 더 나은 안정성과 성능을 얻을 수 있다는 것을 의미한다.
    
응용 프로그램의 경우 여러 인스턴스를 유지 관리하는 리소스 소비가 줄어든다.
</code></pre></div>    </div>
  </div>
</details>

<h3 id="lettuce-단점">Lettuce 단점</h3>

<ul>
  <li>connection 인스턴스의 공유라는 점에서 Thread-safe 한 것이기 때문에 Single-Thread로 동작하는 애플리케이션에서 레디스 데이터에 접근할 때는 또다르게 고려할 점이 생긴다.</li>
  <li>하나의 connection을 공유하기 때문에 connection pool을 생성하지 않으면 transaction을 사용할 수 없다.</li>
</ul>

<p><br /></p>

<h2 id="jedis와-lettuce-비교">🌟 Jedis와 Lettuce 비교</h2>

<p>그렇다면 Jedis와 Lettuce의 차이점이 무엇이길래 Springboot2 이후로는 Lettuce가 기본 Redis Client로 선택되었는지 알아보자
<br />
<br />
<br /></p>

<p><strong>Jedis보다 뛰어난 성능</strong></p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>TPS(낮을수록 응답속도 빠름)</th>
      <th>Redis CPU</th>
      <th>Connections</th>
      <th>응답 속도</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Jedis</td>
      <td>31.000</td>
      <td>20%</td>
      <td>515</td>
      <td>1000ms</td>
    </tr>
    <tr>
      <td>Lettuce</td>
      <td>100,000</td>
      <td>7%</td>
      <td>6</td>
      <td>7.5ms</td>
    </tr>
  </tbody>
</table>

<p><br />
<br />
<br /></p>

<p><strong>Jedis와 Lettuce 기능비교</strong></p>

<table>
  <thead>
    <tr>
      <th>Supported Feature</th>
      <th>Lettuce</th>
      <th>Jedis</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Standalone Connection</td>
      <td>O</td>
      <td>O</td>
    </tr>
    <tr>
      <td>Master/Replica Connection</td>
      <td>O</td>
      <td> </td>
    </tr>
    <tr>
      <td>Redis Sentinel</td>
      <td>Master Lookup, Sentinel Authentication, Replica Redis</td>
      <td>Master Lookup</td>
    </tr>
    <tr>
      <td>Redis Cluster</td>
      <td>Cluster Connection, Cluster Node Connection, Replica Reads</td>
      <td>Cluster Connection, Cluster Node Connection</td>
    </tr>
    <tr>
      <td>Transport Channers</td>
      <td>TCP, OS-native TCP(epoll, kqueue), Unix Domain Sockets</td>
      <td>TCP</td>
    </tr>
    <tr>
      <td>Connection Pooling</td>
      <td>O(using commons-pool2)</td>
      <td>O(using commons-pool2)</td>
    </tr>
    <tr>
      <td>Other Connection Features</td>
      <td>Singleton-connection sharing for non-blocking commands</td>
      <td>JedisShardInfo support</td>
    </tr>
    <tr>
      <td>SSL Support</td>
      <td>O</td>
      <td>O</td>
    </tr>
    <tr>
      <td>Pub/Sub</td>
      <td>O</td>
      <td>O</td>
    </tr>
    <tr>
      <td>Pipelining</td>
      <td>O</td>
      <td>O</td>
    </tr>
    <tr>
      <td>Transactions</td>
      <td>O</td>
      <td>O</td>
    </tr>
    <tr>
      <td>DataType Support</td>
      <td>Key, String, List, Set, Sorted Set, Hash Server, Stream, Scriping, Geo, HyperLogLog</td>
      <td>Key, String, List, Set, Sorted Set, Scriping, Geo, HyperLogLog</td>
    </tr>
    <tr>
      <td>Reactive (non-blocking) API</td>
      <td>O</td>
      <td>O</td>
    </tr>
  </tbody>
</table>

<p><br />
<br /></p>

<p><strong><em>참고 → O 표시는 지원되는 기능이다.</em></strong></p>

<p>표로 jedis와 Lettuce의 기능을 비교해본 결과, 두 가지 차이점을 찾을 수 있다.</p>

<ul>
  <li>Jedis에서 지원하는 모든 기능을 Lettuce에서도 지원한다.</li>
  <li>Jedis에서 지원하지 않는 기능도 Lettuce에서 지원한다.</li>
</ul>

<p><br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br /></p>

<h1 id="reference">🌟<strong>**Reference</strong>**</h1>

<p><a href="http://arahansa.github.io/docs_spring/redis.html">http://arahansa.github.io/docs_spring/redis.html</a></p>

<p><a href="https://wnwngus.tistory.com/64">https://wnwngus.tistory.com/64</a></p>

<p><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/EnableCaching.html">https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/EnableCaching.html</a></p>

<p><a href="https://segmentfault.com/a/1190000040331000/en">https://segmentfault.com/a/1190000040331000/en</a></p>

<p><a href="https://mandlife.tistory.com/entry/Springboot-redis-%EC%84%A4%EC%A0%95-Jedis%EB%B3%B4%EB%8B%A4%EB%8A%94-Lettuce">https://mandlife.tistory.com/entry/Springboot-redis-설정-Jedis보다는-Lettuce</a></p>]]></content><author><name>ramram</name></author><category term="SpringBoot" /><category term="springBoot" /><category term="redis" /><category term="lettuce" /><summary type="html"><![CDATA[들어가며]]></summary></entry></feed>